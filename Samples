-- Querying Multiple Tables with Joins Begin
Select P.Name, P.ProductNumber, PS.Name AS [ProductSubCategory Name] from Production.Product P 
Inner Join Production.ProductSubcategory PS 
ON P.ProductSubcategoryID = PS.ProductSubcategoryID


SELECT PS.Name AS ProductSubcategoryName,
	   PC.Name AS ProductCategoryName FROM Production.ProductSubcategory PS 
INNER JOIN Production.ProductCategory PC 
ON PS.ProductCategoryID = PC.ProductCategoryID

SELECT P.FirstName, P.LastName, E.EmailAddress, PP.PhoneNumber FROM Person.Person P 
INNER JOIN Person.EmailAddress E
ON P.BusinessEntityID = E.BusinessEntityID
INNER JOIN Person.PersonPhone PP 
ON PP.BusinessEntityID = P.BusinessEntityID

SELECT P.Name, P.ProductNumber, PS.Name AS ProductSubCategoryName FROM Production.Product P 
LEFT OUTER JOIN Production.ProductSubcategory PS
ON P.ProductSubcategoryID = PS.ProductSubcategoryID

SELECT P.Name, P.ProductNumber, PS.Name AS ProductSubCategoryName FROM Production.Product P 
RIGHT OUTER JOIN Production.ProductSubcategory PS
ON P.ProductSubcategoryID = PS.ProductSubcategoryID


SELECT P.FirstName, P.LastName, SOH.SalesOrderNumber, SOH.TotalDue AS SalesAmount, T.Name AS TerrorityName FROM Sales.SalesOrderHeader SOH
LEFT OUTER JOIN Sales.SalesPerson SP 
ON SP.BusinessEntityID = SOH.SalesPersonID
LEFT OUTER JOIN HumanResources.Employee E 
ON E.BusinessEntityID = SP.BusinessEntityID
LEFT OUTER JOIN Person.Person P 
ON P.BusinessEntityID = E.BusinessEntityID
LEFT OUTER JOIN Sales.SalesTerritory T 
ON T.TerritoryID = SOH.TerritoryID
WHERE T.Name = 'Northwest'
ORDER BY TotalDue DESC

--Querying Multiple Tables with Joins End

-- Aggregate Functions Begin

SELECT MAX(TotalDue) AS MaxTotalDue FROM Sales.SalesOrderHeader

SELECT SalesPersonID FROM Sales.SalesOrderHeader WHERE SalesPersonID IS NOT NULL

SELECT COUNT(FirstName) from Person.Person -- all datas

SELECT COUNT(Distinct FirstName) from Person.Person -- ignore duplicate datas

SELECT AVG(TotalDue) from Sales.SalesOrderHeader -- Average

SELECT SUM(TotalDue) from Sales.SalesOrderHeader -- Sum

SELECT SUM(TotalDue) from Sales.SalesOrderHeader
WHERE OrderDate Between '5/31/2011' AND '6/6/2011'

-- Aggregate Functions End

-- Grouping Data with the GROUP by Clause Begin

SELECT SalesPersonID ,SUM(TotalDue) AS [Total Sales] FROM Sales.SalesOrderHeader
GROUP BY SalesPersonID

SELECT ProductID, SUM(Quantity) AS [Total in stock], Count(*) AS [Total Locations] FROM Production.ProductInventory 
GROUP BY ProductID

SELECT 
ST.Name AS [Terrority Name],
P.FirstName + ' ' + P.LastName AS SalesPersonName, 
SUM(TotalDue) AS [Total Sales] 
FROM Sales.SalesOrderHeader SOH
INNER JOIN Sales.SalesPerson SP 
ON SP.BusinessEntityID = SOH.SalesPersonID
INNER JOIN Person.Person P 
ON P.BusinessEntityID = SP.BusinessEntityID
INNER JOIN Sales.SalesTerritory ST 
ON ST.TerritoryID = SOH.TerritoryID
WHERE OrderDate Between '5/31/2011' AND '6/6/2011'
GROUP BY ST.Name, P.FirstName + ' ' + P.LastName
ORDER BY 1, 2
-- Grouping Data with the GROUP by Clause End


-- Filtering Groups with the HAVING Clause Begin
SELECT 
	ST.Name AS [Terrority Name],
	SUM(TotalDue) AS [Total Sales - 2011]
FROM Sales.SalesOrderHeader SOH 
INNER JOIN Sales.SalesTerritory ST 
ON ST.TerritoryID = SOH.TerritoryID
WHERE OrderDate Between '5/31/2011' AND '6/6/2011'
GROUP BY St.Name
HAVING SUM(TotalDue) > 133333
ORDER BY St.Name

SELECT PS.Name AS [SubCategory Name], COUNT(*) AS [Product Count] 
FROM Production.Product P
INNER JOIN Production.ProductSubcategory PS
ON PS.ProductSubcategoryID = p.ProductSubcategoryID
GROUP BY PS.Name
HAVING COUNT(*) >= 10
ORDER BY 1

SELECT 
	Department AS [Departman Name],
	COUNT (*) AS [Employee Count]
FROM HumanResources.vEmployeeDepartment
GROUP BY Department
HAVING COUNT(*) IN (6, 7, 10)


SELECT 
	SalesPersonID,
	SUM(TotalDue) AS [Total Sales Amount],
	COUNT(*) AS [Total Sales Count]
FROM Sales.SalesOrderHeader 
WHERE OrderDate Between '1/1/2011' AND '12/31/2011'
AND SalesPersonID IS NOT NULL
GROUP BY SalesPersonID 
HAVING SUM(TotalDue) > 150000 
AND COUNT(*) > 50
ORDER BY [Total Sales Amount] DESC

-- Filtering Groups with the HAVING Clause End

--Excercises (Using AdwentureWorks db)

-- SELECT STATEMENT PRACTICE

-- 1) Retrieve all rows from the HumanResources.Employee table. Return only the NationallDNumber column.

Select NationalIDNumber from HumanResources.Employee

-- 2) Retrieve the top 20 percent of rows from the HumanResources.Employee table.
-- Return the NationalDNumber, JobTitle and BirthDate columns. Give the NationallDNumber column an alias: "SSN"

Select TOP (20) PERCENT NationalIDNumber as SSN, JobTitle, BirthDate from HumanResources.Employee 

-- AGGREGATE FUNCTIONS

-- 1) What is the average StandardCost (located in Production.Product) for each product where the StandardCost is greater than $0.00?

Select AVG(StandardCost) AS StandartCostCount from Production.Product Where StandardCost > 0

-- 2) What is the average Freight amount for each sale (found in Sales.SalesOrderHeader)

Select AVG(Freight)  from Sales.SalesOrderHeader Where TerritoryID = 4

-- 3) How expensive is the most expensive product, by ListPrice, in the table Production.Product

Select MAX(ListPrice) from Production.Product


-- USE AND GO
-- You can select database to be processed.
USE AdventureWorks2012
GO
Select TOP(10) * from Production.Product with (NOLOCK)

-- Run script blog more than 1 with go command
Select TOP(1) * from Production.Product with (NOLOCK)
GO 2  

-- PRINT using for show information messages
PRINT 'Hello Word!'

-- CREATE TABLE (Create a table)
USE DatabaseName 
GO
CREATE TABLE SampleTable
(
	Id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
	UserName NVARCHAR(25) NOT NULL
);

-- ALTER TABLE (Modify a table)
ALTER TABLE SampleTable ADD
	UserPhone NVARCHAR(10) NOT NULL,
	RegisterDate DATETIME NOT NULL DEFAULT GET_DATE();
	 
-- Create new guid
NEWID();

-------------------------------------

-- Declare variable
DECLARE @Sample NVARCHAR(20)
SET @Sample = 'Sample Text';
PRINT @Sample;

-- SELECT INTO using (Select values, create database (if not exist), add values to new database)
Select * INTO ProductBackup from Production.Product

-- UNION - UNION ALL
-- UNION (Combining Query Result. Common values just select once)
SELECT BusinessEntityID, ModifiedDate, SalesQuota
	FROM Sales.SalesPerson
	WHERE SalesQuota > 0
UNION
SELECT BusinessEntityID, QuotaDate, SalesQuota
	FROM Sales.SalesPersonQuotaHistory
	WHERE SalesQuota > 0
	ORDER BY BusinessEntityID DESC, ModifiedDate DESC;

-- UNION ALL (Combining query result and ignore common values. Select all rows)
SELECT BusinessEntityID, ModifiedDate, SalesQuota
	FROM Sales.SalesPerson
	WHERE SalesQuota > 0
UNION
SELECT BusinessEntityID, QuotaDate, SalesQuota
	FROM Sales.SalesPersonQuotaHistory
	WHERE SalesQuota > 0
	ORDER BY BusinessEntityID DESC, ModifiedDate DESC;


-- Like special usings
-- Records with end 'eflector'
 SELECT * FROM Production.Product 
	WHERE Name like '_eflector'

-- Records starts with 'A' or 'C' 
SELECT * FROM Production.Product 
	WHERE Name like '[AC]%'

-- Records starts with 'A', 'B', 'C'
SELECT * FROM Production.Product 
	WHERE Name like '[A-C]%'

-- Records starts with 'A' but second character is not 'C'
SELECT * FROM Production.Product 
	WHERE Name like 'A[^c]%'


-- CAST and CONVERT
-- Cast
SELECT 'Product Code: ' + CAST(ProductID AS VARCHAR)
	+ ' - ' 
	+ 'Product Name: ' + [Name] FROM Production.Product

SELECT CAST(14.54 AS int) 
	
-- Convert

SELECT 9.5 AS Original, CONVERT(int, 9.5) AS [int], 
    CONVERT(decimal(6,4), 9.5) AS decimal;


-- FILTERING
-- IN and NOT IN
-- IN (Select according write values)
SELECT * FROM Sales.SalesPerson 
	WHERE BusinessEntityID IN(274, 275, 276)

-- NOT IN 
SELECT * FROM Sales.SalesPerson 
	WHERE BusinessEntityID NOT IN(274, 275, 276)

-- ISNULL function using
-- ISNULL(ColumnName, Value) if ColumnName is NULL, get column value
SELECT DiscountPct, Description, MinQty, ISNULL(MaxQty, 0) AS MaxQuantity 
FROM Sales.SpecialOffer

-- COALESCE function
-- COALESCE(column1, column2, column3) get is not null first value
Select [Name],[Class], Color, ProductNumber, 
	COALESCE(Class, Color, ProductNumber) AS FirstNotNullColumn
FROM Production.Product

-- If ListPrice value greater than avarage ListPrice value then get values
Select ProductID, ProductNumber, ListPrice from Production.Product 
	Where ListPrice > (Select AVG(ListPrice) from Production.Product)



-- Declare and set values
DECLARE @minOrderDate SMALLDATETIME;
SELECT @minOrderDate = MIN(soh.OrderDate) from Sales.SalesOrderHeader soh;
SELECT 
	Distinct soh.OrderDate AS OrderDate,
	sad.ProductID AS ProductId
FROM Sales.SalesOrderHeader soh 
JOIN Sales.SalesOrderDetail sad ON sad.SalesOrderID = soh.SalesOrderID
Where soh.OrderDate = @minOrderDate


-- or SubQuery use
SELECT 
	Distinct soh.OrderDate AS OrderDate,
	sad.ProductID AS ProductId
FROM Sales.SalesOrderHeader soh 
JOIN Sales.SalesOrderDetail sad ON sad.SalesOrderID = soh.SalesOrderID
Where soh.OrderDate = (SELECT MIN(OrderDate) from Sales.SalesOrderHeader)

-- Derived Tables
-- Find Max CategoryCount 
SELECT 
	MAX(AllCategories.SubCategoryCount) AS MaxSubCategoryCount 
FROM
	(SELECT 
	pc.ProductCategoryID,
	COUNT(psc.ProductSubcategoryID) AS SubCategoryCount 
	FROM Production.ProductCategory pc
	INNER JOIN Production.ProductSubcategory psc
	ON pc.ProductCategoryID = psc.ProductCategoryID
	GROUP BY pc.ProductCategoryID) AllCategories


-- Related SubQueries
-- Relate Product and ProductSubCategory table. Find products subcategory name
SELECT 
	ProductID,
	Name,
	ListPrice,
	(Select Name FROM Production.ProductSubcategory psc 
		WHERE psc.ProductSubcategoryID = p.ProductSubcategoryID) AS SubCategoryName
FROM Production.Product p

-- Select First orders, first order dates and first order ids
SELECT 
	soh.SalesOrderID,
	soh.CustomerID,
	soh.OrderDate FROM Sales.SalesOrderHeader soh 
	WHERE soh.OrderDate = (SELECT MIN(OrderDate) 
	FROM Sales.SalesOrderHeader)



-- IDENTITY  
-- Step 1 Run this query
-- INSERT INTO Productiom.Product.....
-- Step 2 
-- Get last inserted value Id
--SELECT @IDENTITY
-- or you can use @SCOPE_IDENTITY()      

-- IDENT_CURRENT
SELECT IDENT_CURRENT('Production.Product'); -- Get last record Id value

-- @ROWCOUNT
SELECT * FROM Production.Product 

SELECT @@ROWCOUNT AS 'RowCount' -- Get affected row count after database operation

-- @@SERVERNAME
SELECT @@SERVERNAME -- Get server name

-- UPPER (x = 'abC' UPPER(x) => x = 'ABC')
SELECT UPPER(Name) FROM Production.Product

-- LOWER (x = 'AbC' LOWER(x) => x = 'abc')
SELECT LOWER(Name) from Production.Product

-- LEN (Get value length)
SELECT LEN(Name) FROM Production.Product

-- CEILING
PRINT CEILING(-98.1) -- -98
PRINT CEILING($123.22) -- 124.00
PRINT CEILING(123.22) -- 124
PRINT CEILING($-123.22) -- -123.00
PRINT CEILING(-123.22) -- -123.00



-- COMMON TABLE EXPRESSIONS
WITH CTEProduct(ProductId, ProductName, Color) AS
(
	SELECT ProductID, Name, Color FROM Production.Product 
	WHERE ProductID > 300 AND Color IS NOT NULL
)
UPDATE CTEProduct SET ProductName = 'Example Name'
WHERE ProductId = 317; 

SELECT ProductID, Name, Color FROM Production.Product
WHERE ProductID = 317;

